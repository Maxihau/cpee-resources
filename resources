#!/usr/bin/ruby
#
# This file is part of centurio.work/plan.
#
# centurio.work/plan is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# centurio.work/plan is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along with
# centurio.work/plan (file COPYING in the main directory). If not, see
# <http://www.gnu.org/licenses/>.

require 'rubygems'
require 'riddl/server'

class DoExists < Riddl::Implementation #{{{
  def response
    dir = File.join(__dir__,'data',Riddl::Protocols::Utils::escape(@r[0]))
    if Dir.exists?(dir)
      return Riddl::Parameter::Complex.new('exists','text/xml') do
        doc = XML::Smart::string('<?xml-stylesheet type="text/xsl" href="' + @h['X_FORWARDED_PREFIX'] + 'xslt/resource.xsl"?><resource/>')
        doc.root.add('schema','schema.rng') if File.exists?(File.join(dir,'schema.rng'))
        doc.root.add('symbol','symbol.svg') if File.exists?(File.join(dir,'symbol.svg'))
        doc.root.add('properties','properties.json') if File.exists?(File.join(dir,'properties.json'))
        doc.to_s
      end
    else
      @status = 404
      return Riddl::Parameter::Complex.new('exists','text/plain','Existence really is an imperfect tense that never becomes a present. (Friedrich Nietzsche)')
    end
  end
end #}}}
class DoSchema < Riddl::Implementation #{{{
  def response
    file = File.join(__dir__,'data',Riddl::Protocols::Utils::escape(@r[0]),@r.last)
    if File.exists?(file)
      return Riddl::Parameter::Complex.new('rng','text/xml',File.read(file)) if File.exists?(file)
    else
      @status = 404
    end
  end
end #}}}
class DoSymbol < Riddl::Implementation #{{{
  def response
    file = File.join(__dir__,'data',Riddl::Protocols::Utils::escape(@r[0]),@r.last)
    if File.exists?(file)
      return Riddl::Parameter::Complex.new('svg','image/svg+xml',File.read(file))
    else
      @status = 404
    end
  end
end #}}}
class DoProperties < Riddl::Implementation #{{{
  def response
    file = File.join(__dir__,'data',Riddl::Protocols::Utils::escape(@r[0]),@r.last)
    if File.exists?(file)
      return Riddl::Parameter::Complex.new('json','application/json',File.read(file))
    else
      @status = 404
    end
  end
end #}}}
class DoList < Riddl::Implementation #{{{
  def response
    dir = File.join(__dir__,'data')
    return Riddl::Parameter::Complex.new('list','text/xml') do
      doc = XML::Smart::string('<?xml-stylesheet type="text/xsl" href="' + @h['X_FORWARDED_PREFIX'] + 'xslt/resources.xsl"?><resources/>')
      Dir.glob(File.join(dir,'*')).each do |f|
       doc.root.add('resource',File.basename(f))
      end
      doc.to_s
    end
  end
end #}}}

Riddl::Server.new(File.join(__dir__,'/resources.xml'), :host => 'localhost', :port => 9303) do
  accessible_description true
  cross_site_xhr true

  on resource do
    run DoList if get
    on resource do
      run DoExists if get
      on resource 'symbol.svg' do
        run DoSymbol if get
      end
      on resource 'schema.rng' do
        run DoSchema if get
      end
      on resource 'properties.json' do
        run DoProperties if get
      end
    end
  end
end.loop!
